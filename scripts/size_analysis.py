# This script calculcates the median LOC per repository as presented in RQ3
# Input files are generated by boxplot_cs.py & boxplot_java.py

import os
import re

import pandas as pd
from pandas.errors import EmptyDataError

### Read csv file and create pandas DataFrame
def read_file(filepath, column_list, duplicate_flag=True):
    if os.path.exists(filepath):
        try:
            data_frame = pd.read_csv(filepath, usecols=column_list, encoding='utf-8')
            if not data_frame.empty:
                if duplicate_flag:
                    return data_frame
                else:
                    return data_frame.drop_duplicates()
            else:
                return None
        except EmptyDataError:
            return None
        except UnicodeDecodeError:
            return None
    else:
        return None


### Export results to csv [mode: appending]
def export_data(dataFrame, outputFile, headerFlag):
    dataFrame.to_csv(outputFile, header=headerFlag, index=False, mode='a')


def find_median(inputFile, outputFile):
    repoData = read_file(inputFile,
                        ['Project Name', 'Sum LOC', 'Pareto category', 'Language'], True)

    javaData = repoData[repoData['Language'] == 'Java']
    csData = repoData[repoData['Language'] == 'cs']

    categoryList = []
    rows = []

    for category in range(10, 100, 10):
        categoryList.append(category)

        temp = javaData[javaData['Pareto category'].isin(categoryList)]
        javaMedian = javaData[javaData['Pareto category'].isin(categoryList)]['Sum LOC'].median()
        javaMean = javaData[javaData['Pareto category'].isin(categoryList)]['Sum LOC'].mean()
        javaMin = javaData[javaData['Pareto category'].isin(categoryList)]['Sum LOC'].min()
        javaMax = javaData[javaData['Pareto category'].isin(categoryList)]['Sum LOC'].max()

        rows.append([category, javaMedian, 'java'])

        csMedian = csData[csData['Pareto category'].isin(categoryList)]['Sum LOC'].median()
        csMean = csData[csData['Pareto category'].isin(categoryList)]['Sum LOC'].mean()
        csMin = csData[csData['Pareto category'].isin(categoryList)]['Sum LOC'].min()
        csMax = csData[csData['Pareto category'].isin(categoryList)]['Sum LOC'].max()

        rows.append([category, csMedian, 'cs'])

    medianDf = pd.DataFrame(rows, columns=['Pareto Category', 'Median LOC', 'Language'])
    medianDf = medianDf.sort_values(by=['Language', 'Pareto Category'])

    export_data(medianDf, outputFile, True)


# Define variables
inputFile = r'/path/data/results/boxplot.csv'
outputFile = r'/path/data/results/size_median.csv'

if __name__ == "__main__":
    find_median(inputFile, outputFile)
